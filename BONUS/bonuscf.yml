AWSTemplateFormatVersion: 2010-09-09
Description: >-
   Creates 2 instances and 1 VPC.  Each instance gets a private IPon it's subnet and installs required software before logon.  The proxy server gets a public IP as does a NAT gateway.  The backend servers use the NAT gateway for world communications, but they do not have individual public IPs.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  # Removed SSH location, it's useless
Mappings:
  AWSRegionAMI: # AMI for Ubuntu server in each supported region 
    us-east-1:   # N. Virginia
    # AMI ID for Ubuntu 20 (ubuntu + apt) - Amazon Linux 2 AMI ami-02e136e904f3da870 (ec2-user + yum)
      HVM64: ami-09e67e426f25ce0d7
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.18.0.0/23
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: LB-VPC
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.18.0.0/24 
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: LB-public-subnet
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.18.1.0/24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: LB-private-subnet
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: LB-ig
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: LB-public-rt
  PublicRouteToIG:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  NATIPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'NATIPAddress.AllocationId' #!Ref NATIPAddress
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: LB-natgw
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: LB-private-rt
  PrivateRouteToNAT:
    Type: 'AWS::EC2::Route'
    DependsOn: NATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  ProxyIPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref ProxyInstance
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access from trusted sources.  Port 80 or 443 access from appropraite sources
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 172.18.0.0/24 # VPC as a whole.
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 130.108.0.0/16  # WSU CIDR
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 208.38.225.43/32 # rp home
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 74.140.197.15/32 # gf home
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '443'
          CidrIp: 0.0.0.0/0 # HTTP
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '443'
          CidrIp: 172.18.0.0/24 # VPC as a whole.
      Tags: 
        - Key: Name
          Value: LB-sg
  ProxyInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: PublicRouteToIG
    Properties:
      ImageId: !FindInMap [AWSRegionAMI, !Ref "AWS::Region", HVM64]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: proxy
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroup
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet
          PrivateIpAddress: 172.18.0.25
      UserData:
        Fn::Base64: !Sub |
          
          #!/bin/bash -xe
          sudo apt-get update -y
          sudo apt-get install -y haproxy git 
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          sudo echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \ $(. /etc/os-release && echo "$VERSION_CODENAME") stable" |   sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo docker stop rensite
          sudo docker rm rensite
          sudo docker pull paxson13/rensite:latest
          sudo docker run --name rensite -p 80:80 -d paxson13/rensite
          sudo echo "this worked!!!" > /home/ubuntu/success.txt
          sudo reboot
  WebServ1Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: NATGateway
    Properties:
      ImageId: !FindInMap [AWSRegionAMI, !Ref "AWS::Region", HVM64]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: webserv1
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet
          PrivateIpAddress: 172.18.1.26 # TODO make sure unique to the instance
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update -y \
              apache2 && \
            apt-get install -y \
              nmap \
              git \
              nginx && \
            hostnamectl set-hostname webserv1 && \
            reboot
  WebServ2Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: NATGateway
    Properties:
      ImageId: !FindInMap [ AWSRegionAMI, !Ref "AWS::Region", HVM64 ]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: webserv2
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet
          PrivateIpAddress: 172.18.1.27 # TODO make sure unique to the instance
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          apt-get update -y \
            apache2 && \
          apt-get install -y \
            nmap \
            git \
            nginx && \
          hostnamectl set-hostname webserv2 && \
          reboot
  WebServ3Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: NATGateway
    Properties:
      ImageId: !FindInMap [ AWSRegionAMI, !Ref "AWS::Region", HVM64 ]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: webserv3
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet
          PrivateIpAddress: 172.18.1.28 # TODO make sure unique to the instance
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          apt-get update -y \
            apache2 && \
          apt-get install -y \
            nmap \
            git \
            nginx && \
          hostnamectl set-hostname webserv3 && \
          reboot